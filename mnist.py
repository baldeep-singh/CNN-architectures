{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNoajhPiROguIEqX2JgWwv5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/baldeep-singh/CNN-architectures/blob/main/mnist.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "from keras.datasets import mnist \n",
        "from keras import backend as K"
      ],
      "metadata": {
        "id": "5C6tAh7leJqQ"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#load the mnist dataset\n",
        "(X_train,y_train),(X_test,y_test) = mnist.load_data()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkeeuyRieRdH",
        "outputId": "583682ea-4422-44f9-9428-68028924794c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "fig = plt.figure()\n",
        "for i in range(9):\n",
        "  plt.subplot(3,3,i+1)\n",
        "  plt.tight_layout()\n",
        "  plt.imshow(X_train[i], cmap='gray', interpolation='none')\n",
        "  plt.title(\"Digit: {}\".format(y_train[i]))\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "fig"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 909
        },
        "id": "YbMAnqEzlrqz",
        "outputId": "e6d7730c-c4a5-4e8f-c8b2-d85433cd53be"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img_rows,img_cols=28,28\n",
        "if K.image_data_format() == 'channels_first':\n",
        "    X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n",
        "    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n",
        "    input_shape = (1, img_rows, img_cols)\n",
        "else:\n",
        "    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n",
        "    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n",
        "    input_shape = (img_rows, img_cols, 1)\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train /= 255\n",
        "X_test /= 255\n",
        "print('X_train shape:', X_train.shape) #X_train shape: (60000, 28, 28, 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Etl8FhCvl1gv",
        "outputId": "60faae52-9da6-4b2d-b716-877bc77ffc39"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (60000, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#set number of categories\n",
        "num_category = 10\n",
        "# convert class vectors to binary class matrices\n",
        "y_train = keras.utils.to_categorical(y_train, num_category)\n",
        "y_test = keras.utils.to_categorical(y_test, num_category)"
      ],
      "metadata": {
        "id": "nuzU6oIrmY8V"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##model building\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Conv2D,MaxPooling2D\n",
        "from keras.layers import Activation, Dense, Dropout, Flatten\n",
        "\n",
        "model = Sequential()\n",
        "#convolutional layer with rectified linear unit activation\n",
        "model.add(Conv2D(32, kernel_size=(3, 3),\n",
        "                 activation='relu',\n",
        "                 input_shape=input_shape))\n",
        "#32 convolution filters used each of size 3x3\n",
        "#again\n",
        "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "#64 convolution filters used each of size 3x3\n",
        "#choose the best features via pooling\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "#randomly turn neurons on and off to improve convergence\n",
        "model.add(Dropout(0.25))\n",
        "#flatten since too many dimensions, we only want a classification output\n",
        "model.add(Flatten())\n",
        "#fully connected to get all relevant data\n",
        "model.add(Dense(128, activation='relu'))\n",
        "#one more dropout for convergence' sake :) \n",
        "model.add(Dropout(0.5))\n",
        "#output a softmax to squash the matrix into output probabilities\n",
        "model.add(Dense(num_category, activation='softmax'))\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Esmvzw3tnqjt",
        "outputId": "f6542fdd-8ec5-4a3b-dd90-740dcc2b1c2c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 26, 26, 32)        320       \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 24, 24, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 12, 12, 64)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 12, 12, 64)        0         \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 9216)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 128)               1179776   \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 128)               0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,199,882\n",
            "Trainable params: 1,199,882\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Adaptive learning rate (adaDelta) is a popular form of gradient descent rivaled only by adam and adagrad\n",
        "#categorical ce since we have multiple classes (10) \n",
        "model.compile(loss=keras.losses.categorical_crossentropy,\n",
        "              optimizer=keras.optimizers.Adadelta(),\n",
        "              metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "teqTVCN8oByj"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 128\n",
        "num_epoch = 100\n",
        "#model training\n",
        "model_log = model.fit(X_train, y_train,\n",
        "          batch_size=batch_size,\n",
        "          epochs=num_epoch,\n",
        "          verbose=1,\n",
        "          validation_data=(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qxkwY6L2pbKa",
        "outputId": "ee205347-3bfb-44df-de93-6279d098825b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "469/469 [==============================] - 16s 10ms/step - loss: 2.2867 - accuracy: 0.1451 - val_loss: 2.2595 - val_accuracy: 0.3137\n",
            "Epoch 2/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 2.2425 - accuracy: 0.2549 - val_loss: 2.2045 - val_accuracy: 0.4963\n",
            "Epoch 3/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 2.1855 - accuracy: 0.3520 - val_loss: 2.1305 - val_accuracy: 0.6036\n",
            "Epoch 4/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 2.1060 - accuracy: 0.4300 - val_loss: 2.0269 - val_accuracy: 0.6776\n",
            "Epoch 5/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 1.9965 - accuracy: 0.4897 - val_loss: 1.8846 - val_accuracy: 0.7309\n",
            "Epoch 6/100\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 1.8519 - accuracy: 0.5428 - val_loss: 1.7000 - val_accuracy: 0.7686\n",
            "Epoch 7/100\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 1.6780 - accuracy: 0.5852 - val_loss: 1.4843 - val_accuracy: 0.7906\n",
            "Epoch 8/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 1.4943 - accuracy: 0.6185 - val_loss: 1.2685 - val_accuracy: 0.8066\n",
            "Epoch 9/100\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 1.3286 - accuracy: 0.6445 - val_loss: 1.0834 - val_accuracy: 0.8160\n",
            "Epoch 10/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 1.1897 - accuracy: 0.6692 - val_loss: 0.9393 - val_accuracy: 0.8226\n",
            "Epoch 11/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 1.0830 - accuracy: 0.6888 - val_loss: 0.8316 - val_accuracy: 0.8310\n",
            "Epoch 12/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 1.0002 - accuracy: 0.7069 - val_loss: 0.7510 - val_accuracy: 0.8381\n",
            "Epoch 13/100\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 0.9384 - accuracy: 0.7208 - val_loss: 0.6889 - val_accuracy: 0.8455\n",
            "Epoch 14/100\n",
            "469/469 [==============================] - 5s 11ms/step - loss: 0.8844 - accuracy: 0.7329 - val_loss: 0.6403 - val_accuracy: 0.8503\n",
            "Epoch 15/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.8409 - accuracy: 0.7454 - val_loss: 0.6016 - val_accuracy: 0.8550\n",
            "Epoch 16/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.8049 - accuracy: 0.7552 - val_loss: 0.5691 - val_accuracy: 0.8607\n",
            "Epoch 17/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.7714 - accuracy: 0.7628 - val_loss: 0.5414 - val_accuracy: 0.8653\n",
            "Epoch 18/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.7470 - accuracy: 0.7711 - val_loss: 0.5183 - val_accuracy: 0.8695\n",
            "Epoch 19/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.7222 - accuracy: 0.7788 - val_loss: 0.4985 - val_accuracy: 0.8727\n",
            "Epoch 20/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.7004 - accuracy: 0.7841 - val_loss: 0.4810 - val_accuracy: 0.8769\n",
            "Epoch 21/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6795 - accuracy: 0.7908 - val_loss: 0.4653 - val_accuracy: 0.8797\n",
            "Epoch 22/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6627 - accuracy: 0.7976 - val_loss: 0.4511 - val_accuracy: 0.8820\n",
            "Epoch 23/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6472 - accuracy: 0.7995 - val_loss: 0.4384 - val_accuracy: 0.8848\n",
            "Epoch 24/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6317 - accuracy: 0.8058 - val_loss: 0.4275 - val_accuracy: 0.8863\n",
            "Epoch 25/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6190 - accuracy: 0.8114 - val_loss: 0.4170 - val_accuracy: 0.8881\n",
            "Epoch 26/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.6067 - accuracy: 0.8139 - val_loss: 0.4074 - val_accuracy: 0.8900\n",
            "Epoch 27/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5943 - accuracy: 0.8181 - val_loss: 0.3989 - val_accuracy: 0.8924\n",
            "Epoch 28/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5806 - accuracy: 0.8219 - val_loss: 0.3908 - val_accuracy: 0.8944\n",
            "Epoch 29/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5774 - accuracy: 0.8233 - val_loss: 0.3836 - val_accuracy: 0.8954\n",
            "Epoch 30/100\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 0.5643 - accuracy: 0.8275 - val_loss: 0.3766 - val_accuracy: 0.8971\n",
            "Epoch 31/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5599 - accuracy: 0.8308 - val_loss: 0.3702 - val_accuracy: 0.8987\n",
            "Epoch 32/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5508 - accuracy: 0.8332 - val_loss: 0.3643 - val_accuracy: 0.9001\n",
            "Epoch 33/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5424 - accuracy: 0.8361 - val_loss: 0.3585 - val_accuracy: 0.9015\n",
            "Epoch 34/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5351 - accuracy: 0.8370 - val_loss: 0.3529 - val_accuracy: 0.9032\n",
            "Epoch 35/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5263 - accuracy: 0.8399 - val_loss: 0.3484 - val_accuracy: 0.9036\n",
            "Epoch 36/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5206 - accuracy: 0.8429 - val_loss: 0.3428 - val_accuracy: 0.9055\n",
            "Epoch 37/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5118 - accuracy: 0.8438 - val_loss: 0.3383 - val_accuracy: 0.9066\n",
            "Epoch 38/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5077 - accuracy: 0.8447 - val_loss: 0.3340 - val_accuracy: 0.9078\n",
            "Epoch 39/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.5052 - accuracy: 0.8470 - val_loss: 0.3297 - val_accuracy: 0.9093\n",
            "Epoch 40/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4958 - accuracy: 0.8500 - val_loss: 0.3261 - val_accuracy: 0.9113\n",
            "Epoch 41/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4927 - accuracy: 0.8501 - val_loss: 0.3222 - val_accuracy: 0.9127\n",
            "Epoch 42/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4858 - accuracy: 0.8529 - val_loss: 0.3184 - val_accuracy: 0.9126\n",
            "Epoch 43/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4809 - accuracy: 0.8538 - val_loss: 0.3149 - val_accuracy: 0.9135\n",
            "Epoch 44/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4747 - accuracy: 0.8549 - val_loss: 0.3112 - val_accuracy: 0.9140\n",
            "Epoch 45/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4723 - accuracy: 0.8557 - val_loss: 0.3082 - val_accuracy: 0.9146\n",
            "Epoch 46/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4672 - accuracy: 0.8585 - val_loss: 0.3049 - val_accuracy: 0.9154\n",
            "Epoch 47/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4634 - accuracy: 0.8597 - val_loss: 0.3021 - val_accuracy: 0.9161\n",
            "Epoch 48/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4629 - accuracy: 0.8596 - val_loss: 0.2990 - val_accuracy: 0.9170\n",
            "Epoch 49/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4569 - accuracy: 0.8620 - val_loss: 0.2966 - val_accuracy: 0.9175\n",
            "Epoch 50/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4535 - accuracy: 0.8608 - val_loss: 0.2935 - val_accuracy: 0.9178\n",
            "Epoch 51/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4481 - accuracy: 0.8636 - val_loss: 0.2909 - val_accuracy: 0.9181\n",
            "Epoch 52/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4417 - accuracy: 0.8659 - val_loss: 0.2882 - val_accuracy: 0.9189\n",
            "Epoch 53/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4442 - accuracy: 0.8644 - val_loss: 0.2860 - val_accuracy: 0.9196\n",
            "Epoch 54/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4393 - accuracy: 0.8665 - val_loss: 0.2837 - val_accuracy: 0.9193\n",
            "Epoch 55/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4340 - accuracy: 0.8679 - val_loss: 0.2809 - val_accuracy: 0.9204\n",
            "Epoch 56/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4346 - accuracy: 0.8681 - val_loss: 0.2787 - val_accuracy: 0.9211\n",
            "Epoch 57/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4250 - accuracy: 0.8716 - val_loss: 0.2763 - val_accuracy: 0.9213\n",
            "Epoch 58/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4234 - accuracy: 0.8736 - val_loss: 0.2738 - val_accuracy: 0.9219\n",
            "Epoch 59/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4202 - accuracy: 0.8733 - val_loss: 0.2715 - val_accuracy: 0.9220\n",
            "Epoch 60/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4186 - accuracy: 0.8737 - val_loss: 0.2696 - val_accuracy: 0.9223\n",
            "Epoch 61/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4210 - accuracy: 0.8725 - val_loss: 0.2678 - val_accuracy: 0.9228\n",
            "Epoch 62/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4129 - accuracy: 0.8748 - val_loss: 0.2658 - val_accuracy: 0.9238\n",
            "Epoch 63/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4111 - accuracy: 0.8752 - val_loss: 0.2635 - val_accuracy: 0.9241\n",
            "Epoch 64/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4078 - accuracy: 0.8765 - val_loss: 0.2615 - val_accuracy: 0.9244\n",
            "Epoch 65/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4062 - accuracy: 0.8783 - val_loss: 0.2596 - val_accuracy: 0.9246\n",
            "Epoch 66/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.4035 - accuracy: 0.8777 - val_loss: 0.2578 - val_accuracy: 0.9249\n",
            "Epoch 67/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3997 - accuracy: 0.8802 - val_loss: 0.2560 - val_accuracy: 0.9258\n",
            "Epoch 68/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3971 - accuracy: 0.8806 - val_loss: 0.2541 - val_accuracy: 0.9263\n",
            "Epoch 69/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3962 - accuracy: 0.8800 - val_loss: 0.2520 - val_accuracy: 0.9266\n",
            "Epoch 70/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3930 - accuracy: 0.8802 - val_loss: 0.2508 - val_accuracy: 0.9271\n",
            "Epoch 71/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3915 - accuracy: 0.8823 - val_loss: 0.2492 - val_accuracy: 0.9273\n",
            "Epoch 72/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3891 - accuracy: 0.8821 - val_loss: 0.2473 - val_accuracy: 0.9287\n",
            "Epoch 73/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3868 - accuracy: 0.8841 - val_loss: 0.2455 - val_accuracy: 0.9291\n",
            "Epoch 74/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3832 - accuracy: 0.8843 - val_loss: 0.2440 - val_accuracy: 0.9296\n",
            "Epoch 75/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3797 - accuracy: 0.8858 - val_loss: 0.2424 - val_accuracy: 0.9298\n",
            "Epoch 76/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3810 - accuracy: 0.8858 - val_loss: 0.2410 - val_accuracy: 0.9303\n",
            "Epoch 77/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3807 - accuracy: 0.8850 - val_loss: 0.2396 - val_accuracy: 0.9308\n",
            "Epoch 78/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3787 - accuracy: 0.8859 - val_loss: 0.2378 - val_accuracy: 0.9309\n",
            "Epoch 79/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3766 - accuracy: 0.8868 - val_loss: 0.2366 - val_accuracy: 0.9313\n",
            "Epoch 80/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3714 - accuracy: 0.8888 - val_loss: 0.2352 - val_accuracy: 0.9318\n",
            "Epoch 81/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3696 - accuracy: 0.8896 - val_loss: 0.2338 - val_accuracy: 0.9322\n",
            "Epoch 82/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3693 - accuracy: 0.8883 - val_loss: 0.2323 - val_accuracy: 0.9320\n",
            "Epoch 83/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3620 - accuracy: 0.8917 - val_loss: 0.2308 - val_accuracy: 0.9328\n",
            "Epoch 84/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3620 - accuracy: 0.8910 - val_loss: 0.2292 - val_accuracy: 0.9337\n",
            "Epoch 85/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3611 - accuracy: 0.8904 - val_loss: 0.2278 - val_accuracy: 0.9343\n",
            "Epoch 86/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3589 - accuracy: 0.8910 - val_loss: 0.2266 - val_accuracy: 0.9350\n",
            "Epoch 87/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3609 - accuracy: 0.8925 - val_loss: 0.2256 - val_accuracy: 0.9351\n",
            "Epoch 88/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3593 - accuracy: 0.8928 - val_loss: 0.2243 - val_accuracy: 0.9357\n",
            "Epoch 89/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3560 - accuracy: 0.8935 - val_loss: 0.2231 - val_accuracy: 0.9361\n",
            "Epoch 90/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3551 - accuracy: 0.8935 - val_loss: 0.2217 - val_accuracy: 0.9362\n",
            "Epoch 91/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3509 - accuracy: 0.8955 - val_loss: 0.2203 - val_accuracy: 0.9366\n",
            "Epoch 92/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3496 - accuracy: 0.8945 - val_loss: 0.2189 - val_accuracy: 0.9371\n",
            "Epoch 93/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3499 - accuracy: 0.8953 - val_loss: 0.2178 - val_accuracy: 0.9375\n",
            "Epoch 94/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3479 - accuracy: 0.8938 - val_loss: 0.2166 - val_accuracy: 0.9378\n",
            "Epoch 95/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3447 - accuracy: 0.8970 - val_loss: 0.2155 - val_accuracy: 0.9380\n",
            "Epoch 96/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3413 - accuracy: 0.8980 - val_loss: 0.2143 - val_accuracy: 0.9379\n",
            "Epoch 97/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3399 - accuracy: 0.8978 - val_loss: 0.2132 - val_accuracy: 0.9380\n",
            "Epoch 98/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3384 - accuracy: 0.8975 - val_loss: 0.2121 - val_accuracy: 0.9389\n",
            "Epoch 99/100\n",
            "469/469 [==============================] - 4s 10ms/step - loss: 0.3351 - accuracy: 0.8988 - val_loss: 0.2110 - val_accuracy: 0.9393\n",
            "Epoch 100/100\n",
            "469/469 [==============================] - 4s 9ms/step - loss: 0.3382 - accuracy: 0.8989 - val_loss: 0.2101 - val_accuracy: 0.9392\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score = model.evaluate(X_test, y_test, verbose=0)\n",
        "print('Test loss:', score[0]) #Test loss: 0.0296396646054\n",
        "print('Test accuracy:', score[1]) #Test accuracy: 0.9904"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "at4RDVcoplyl",
        "outputId": "62d31bf7-5ac0-4282-a9f8-c342f1919a80"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test loss: 0.2100774347782135\n",
            "Test accuracy: 0.9391999840736389\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WfkW3j7Nsuo8"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xILiT51vs2-y"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}